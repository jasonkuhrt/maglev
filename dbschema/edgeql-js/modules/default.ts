// GENERATED by @gel/generate v0.6.4

import * as _ from '../imports'
import * as $ from '../reflection'
import type * as _std from './std'
export type $ProjectStatus = {
  'deploying': $.$expr_Literal<$ProjectStatus>
  'active': $.$expr_Literal<$ProjectStatus>
  'failed': $.$expr_Literal<$ProjectStatus>
} & $.EnumType<'default::ProjectStatus', ['deploying', 'active', 'failed']>
const ProjectStatus: $ProjectStatus = $.makeType<$ProjectStatus>(
  _.spec,
  'f25b6d94-9cd5-11f0-97ba-f18b859aed0b',
  _.syntax.literal,
)

export type $Theme = {
  'light': $.$expr_Literal<$Theme>
  'dark': $.$expr_Literal<$Theme>
  'system': $.$expr_Literal<$Theme>
} & $.EnumType<'default::Theme', ['light', 'dark', 'system']>
const Theme: $Theme = $.makeType<$Theme>(_.spec, 'f2323b4a-9cd5-11f0-bdf1-95df378438ba', _.syntax.literal)

export type $DeploymentEventλShape = $.typeutil.flatten<
  _std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
    'details': $.PropertyDesc<_std.$json, $.Cardinality.AtMostOne, false, false, false, false>
    'timestamp': $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>
    'eventType': $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>
    'newStatus': $.PropertyDesc<$ProjectStatus, $.Cardinality.AtMostOne, false, false, false, false>
    'oldStatus': $.PropertyDesc<$ProjectStatus, $.Cardinality.AtMostOne, false, false, false, false>
    'project': $.LinkDesc<$Project, $.Cardinality.One, {}, false, false, false, false>
  }
>
type $DeploymentEvent = $.ObjectType<'default::DeploymentEvent', $DeploymentEventλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], 'default::DeploymentEvent'>
const $DeploymentEvent = $.makeType<$DeploymentEvent>(_.spec, 'f25b7fa0-9cd5-11f0-a423-2923a89dff52', _.syntax.literal)

const DeploymentEvent: $.$expr_PathNode<$.TypeSet<$DeploymentEvent, $.Cardinality.Many>, null> = _.syntax.$PathNode(
  $.$toSet($DeploymentEvent, $.Cardinality.Many),
  null,
)

export type $ProjectλShape = $.typeutil.flatten<
  _std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
    'railwayProjectId': $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>
    'createdAt': $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>
    'name': $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>
    'railwayEnvironmentId': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'railwayServiceId': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'updatedAt': $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>
    'status': $.PropertyDesc<$ProjectStatus, $.Cardinality.AtMostOne, false, false, false, true>
    'deployedAt': $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>
    'lastError': $.PropertyDesc<_std.$json, $.Cardinality.AtMostOne, false, false, false, false>
    'railwayServiceIds': $.PropertyDesc<$.ArrayType<_std.$str>, $.Cardinality.AtMostOne, false, false, false, false>
    'railwayWorkflowId': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'templateId': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'url': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'template': $.LinkDesc<$Template, $.Cardinality.AtMostOne, {}, false, false, false, false>
    '<project[is DeploymentEvent]': $.LinkDesc<$DeploymentEvent, $.Cardinality.Many, {}, false, false, false, false>
    '<project': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>
  }
>
type $Project = $.ObjectType<'default::Project', $ProjectλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  { railwayProjectId: { __element__: _std.$str; __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne } },
], 'default::Project'>
const $Project = $.makeType<$Project>(_.spec, 'f15d881e-9cd5-11f0-b823-eb62e33d64aa', _.syntax.literal)

const Project: $.$expr_PathNode<$.TypeSet<$Project, $.Cardinality.Many>, null> = _.syntax.$PathNode(
  $.$toSet($Project, $.Cardinality.Many),
  null,
)

export type $SettingsλShape = $.typeutil.flatten<
  _std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
    'createdAt': $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>
    'gelDsn': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'updatedAt': $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>
    'railwayApiToken': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'theme': $.PropertyDesc<$Theme, $.Cardinality.AtMostOne, false, false, false, true>
  }
>
type $Settings = $.ObjectType<'default::Settings', $SettingsλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], 'default::Settings'>
const $Settings = $.makeType<$Settings>(_.spec, 'f160ce84-9cd5-11f0-9e3e-c7b097fdef81', _.syntax.literal)

const Settings: $.$expr_PathNode<$.TypeSet<$Settings, $.Cardinality.Many>, null> = _.syntax.$PathNode(
  $.$toSet($Settings, $.Cardinality.Many),
  null,
)

export type $TemplateλShape = $.typeutil.flatten<
  _std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
    'code': $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>
    'createdAt': $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>
    'description': $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>
    'githubRepos': $.PropertyDesc<$.ArrayType<_std.$str>, $.Cardinality.AtMostOne, false, false, false, false>
    'name': $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>
    'serializedConfig': $.PropertyDesc<_std.$json, $.Cardinality.AtMostOne, false, false, false, false>
    'serviceCount': $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, true>
    'updatedAt': $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>
    '<template[is Project]': $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false, false, false>
    '<template': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>
  }
>
type $Template = $.ObjectType<'default::Template', $TemplateλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  { code: { __element__: _std.$str; __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne } },
], 'default::Template'>
const $Template = $.makeType<$Template>(_.spec, 'f2603b94-9cd5-11f0-8af2-2345313e0dfe', _.syntax.literal)

const Template: $.$expr_PathNode<$.TypeSet<$Template, $.Cardinality.Many>, null> = _.syntax.$PathNode(
  $.$toSet($Template, $.Cardinality.Many),
  null,
)

export {
  $DeploymentEvent,
  $Project,
  $Settings,
  $Template,
  DeploymentEvent,
  Project,
  ProjectStatus,
  Settings,
  Template,
  Theme,
}

type __defaultExports = {
  'ProjectStatus': typeof ProjectStatus
  'Theme': typeof Theme
  'DeploymentEvent': typeof DeploymentEvent
  'Project': typeof Project
  'Settings': typeof Settings
  'Template': typeof Template
}
const __defaultExports: __defaultExports = {
  'ProjectStatus': ProjectStatus,
  'Theme': Theme,
  'DeploymentEvent': DeploymentEvent,
  'Project': Project,
  'Settings': Settings,
  'Template': Template,
}
export default __defaultExports
